var assert = require("assert");
var Validation = require('../validation/validation');

describe("Validation", () => 
{
    var successValidator = new Validation({name: "teste", age: 10});
    var errorValidator = new Validation({name: undefined, age: 0});

    it("add a validation to a property", () =>
    {
        assert.equal(successValidator.name.hasValue != null, true);
    });

    it("test a property on the fly", () =>
    {
        assert.equal(successValidator.undefinedProperty != null, true);
    });

    it('execute validation when condition match', () => 
    {
        successValidator.age.when(true).hasValue();
        successValidator.age.when(false).hasValue();
    })

    it("chain validations", () =>
    {
        successValidator.age.hasValue().greaterThan(5);
    });
    
    describe("Has value", () => 
    {
        it("validates if has value", () => 
        {
            successValidator.name.hasValue();
        })

        it("thows error if has no value", () => 
        {
            assert.throws(errorValidator.name.hasValue);
        })

    })

    describe("Greater value", () => 
    {
        it("validates if is greater", () => 
        {
            successValidator.age.greaterThan(5);
        })

        it("throws error if value is lower", () => 
        {
            assert.throws(() => errorValidator.age.greaterThan(5))
        })
    })

    describe("Less value", () => 
    {
        it("validates if is less", () => 
        {
            successValidator.age.lessThan(11);
        })

        it("throws error if value is greater", () => 
        {
            assert.throws(() => errorValidator.age.lessThan(-1));
        })
    })

    describe("Betwee", () => 
    {
        it("validates if is between", () => 
        {
            successValidator.age.between(5,15);
        })

        it("throws error if value is not between", () => 
        {
            assert.throws(() => errorValidator.age.between(5,15));
        })
    })

})